#### cookies,sessionStorage与localStorage区别

> **储存大小**

 {
  cookies: {
    Opera ---> 4096字节
    Firefox && Safari ---> 4097字节
    Internet Explorer ---> 4095字节
  }

  sessionStorage && localStorage: {
    任意浏览器 ---> 不小于5MB
  }
}

> **储存位置**

 {
  cookies: {
    cookies保存在浏览器端
  }

  sessionStorage && localStorage: {
    保存在服务器端
  }
}

> **储存内容**

 {
  cookies: {
    cookie只能保存字符串类型，以文本的方式
  }

  sessionStorage && localStorage: {
    支持任何类型，或者说任何对象的储存方式
  }
}

> **安全性**

 {
  cookies: {
    针对cookie所存在的攻击：Cookie欺骗，Cookie截获
  }

  sessionStorage && localStorage: {
    1.sessionID存储在cookie中，若要攻破session首先要攻破cookie
    2.sessionID是要有人登录，或者启动session_start才会有，所以攻破cookie也不一定能得到sessionID
    3.第二次启动session_start后，前一次的sessionID就是失效了，session过期后，sessionID也随之失效
    4.sessionID是加密的
  }

  应用场景: {
    cookies: {
      1.判断用户是否登陆过网站，以便下次登录时能够实现自动登录（或者记住密码）。如果我们删除cookie，则每次登录必须从新填写登录的相关信息。
      2.保存上次登录的时间等信息
      3.保存上次查看的页面
      4.浏览计数
    }

    sessionStorage && localStorage: {
      1.网上商城中的购物车
      2.保存用户登录信息
      3.将某些数据放入session中，供同一用户的不同页面使用
      4.防止用户非法登录
    }
  }

  可读性(可维护性): {
    cookies: {
      由于cookies所保存的内容单一，在阅读或者说维护起来反而更加方便
    }

    sessionStorage && localStorage: {
      创建Session变量有很大的随意性，可随时调用，不需要开发者做精确地处理，所以，过度使用session变量将会导致代码不可读而且不好维护。
    }
  }
}
